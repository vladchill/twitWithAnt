<project name="twitWithAnt" default="testDataTile" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- Project properties -->
    <property name="src.dir"                location="${basedir}${file.separator}src"/>
    <property name="config.dir"             location="${basedir}${file.separator}config"/>
    <property name="build.dir"              location="${basedir}${file.separator}build"/>
    <property name="testng.dir"             location="${config.dir}${file.separator}testNG"/>
    <property name="lib.dir"                location="${basedir}${file.separator}lib"/>
    <property name="drivers.dir"            location="${basedir}${file.separator}lib${file.separator}drivers"/>
    <property name="bin.dir"                location="${build.dir}${file.separator}bin"/>
    <property name="jar.dir"                location="${build.dir}${file.separator}jar"/>
    <property name="report.dir"             location="${build.dir}${file.separator}report"/>
    <property name="log.dir"                location="${build.dir}${file.separator}logs"/>
    <property name="image.dir"              location="${report.dir}"/>
    <property name="reportNGcss"            location="${basedir}${file.separator}config${file.separator}reportStyle.css"/>
    <property name="upload.dir"             value="${basedir}${file.separator}upload${file.separator}"/>

    <!-- Ivy properties -->
    <property name="ivy.install.version" value="2.4.0"/>
    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.lib.dir" value="${basedir}/lib"/>

    <path id="lib.path.id">
        <fileset dir="${ivy.lib.dir}" />
    </path>


    <!--Tasks definitions-->
    <!--<taskdef resource="net/sf/antcontrib/antcontrib.properties" />-->
        <!--<classpath>-->
            <!--<pathelement location="${lib.dir}${file.separator}ant-contrib-1.0b3.jar"/>-->
        <!--</classpath>-->
    <!--&lt;!&ndash;<classpath>&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash;<path refid="lib.path.id"/>&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;&lt;!&ndash;</classpath>&ndash;&gt;&ndash;&gt;-->
    <!--</taskdef>-->
    <taskdef resource="testngtasks"  classpath="${lib.dir}${file.separator}testng-6.9.13.6.jar"/>

    <!--Ivy tasks-->

    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="install-ivy" depends="download-ivy" description="Install ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="ret" depends="install-ivy" description="Download project dependencies">
        <ivy:resolve refresh="true" showprogress="true" />
        <ivy:retrieve/>
    </target>


    <target name="setVariables" description="Set browser, base.url, report directory variables">
        <if>
            <isset property="browser"/>
            <else>
                <property name="browser" value="firefox"/>
            </else>
        </if>

        <property name="report.dir"
                  value="${build.dir}${file.separator}report${file.separator}${file.separator}${browser}"/>

        <if>
            <isset property="base.url"/>
            <else>
                <property name="base.url" value="https://demo.datatiler.eu/"/>
            </else>
        </if>

        <if>
            <isset property="build.version"/>
            <else>
                <property name="build.version" value="v.0.19.5-339"/>
            </else>
        </if>

        <if>
            <isset property="build.platform"/>
            <else>
                <property name="build.platform" value="windows"/>
            </else>
        </if>

    </target>

    <target name="clean" description="Remove all generated content">
        <delete dir="${build.dir}"/>
    </target>

    <target name="reportDir" description="Create repoort dir">
        <mkdir dir="${report.dir}"/>
    </target>

    <target name="logDir">
        <mkdir dir="${log.dir}"/>
    </target>
    <target name="buildDirs">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${jar.dir}"/>
        <mkdir dir="${bin.dir}"/>
    </target>


    <target name="prepare" description="Create all needed dirs and build jar file with test classes"
            depends="reportDir, buildDirs">

        <!--Create required dirs-->
        <!--<mkdir dir="${jar.dir}"/>-->
        <!--<mkdir dir="${bin.dir}"/>-->
        <!--<mkdir dir="${report.dir}"/>-->

        <!--Create one jar file from all test classes-->
        <path id="classpath">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </path>
        <javac srcdir="${src.dir}"
               destdir="${bin.dir}"
               debug="true"
               includes="**/*.java"
               classpathref="classpath"
               includeantruntime="false"
               debuglevel="lines,vars,source"
               fork="yes"/>
        <jar destfile="${jar.dir}${file.separator}Tests.jar" basedir="${bin.dir}"/>
    </target>


    <!--Test targets-->
    <target name="testDataTile" depends="clean, prepare, setVariables">

        <path id="classpath">
            <fileset dir="${lib.dir}" includes="*.jar"/>
            <fileset dir="${lib.dir}" includes="${file.separator}reporting${file.separator}*.jar"/>
            <fileset dir="${lib.dir}${file.separator}testlink" includes="*.jar"/>
            <fileset dir="${jar.dir}" includes="**/*jar"/>
        </path>

        <testng classpathref="classpath"
                outputDir="${report.dir}"
                workingdir="${report.dir}"
                failureproperty="testngfail"
                haltOnfailure="false"
                delegateCommandSystemProperties="true"
                useDefaultListeners="false"
                listeners="org.uncommons.reportng.HTMLReporter,
                                org.uncommons.reportng.JUnitXMLReporter, ru.yandex.qatools.allure.testng.AllureTestListener">

            <xmlfileset dir="${basedir}" includes="testng.xml"/>

            <sysproperty key="org.uncommons.reportng.title" value="Automated Test Report"/>
            <sysproperty key="org.uncommons.reportng.frames" value="false"/>
            <sysproperty key="org.uncommons.reportng.stylesheet" value="${reportNGcss}"/>
            <sysproperty key="org.uncommons.reportng.escape-output" value="false"/>

            <sysproperty key="drivers.dir" value="${drivers.dir}"/>
            <sysproperty key="config.dir" value="${config.dir}"/>
            <sysproperty key="image.dir" value="${image.dir}"/>
            <sysproperty key="basedir" value="${basedir}"/>
            <sysproperty key="browser" value="${browser}"/>
            <sysproperty key="upload.dir" value="${upload.dir}"/>
            <sysproperty key="build.version" value="${build.version}"/>

            <jvmarg value="-Dfile.encoding=UTF-8"/>
        </testng>
    </target>

    <target name="debug" depends="clean, prepare, setVariables">
        <path id="classpath">
            <fileset dir="${lib.dir}" includes="*.jar"/>
            <fileset dir="${lib.dir}" includes="${file.separator}reporting${file.separator}*.jar"/>
            <fileset dir="${lib.dir}${file.separator}testlink" includes="*.jar"/>
            <fileset dir="${jar.dir}" includes="**/*jar"/>
        </path>

        <testng classpathref="classpath"
                outputDir="${report.dir}s"
                workingdir="${report.dir}s"
                failureproperty="testngfail"
                haltOnfailure="false"
                delegateCommandSystemProperties="true"
                useDefaultListeners="false"
                listeners="org.uncommons.reportng.HTMLReporter, com.qatestlab.reporting.TestListener,
                org.uncommons.reportng.JUnitXMLReporter, org.testng.reporters.XMLReporter">

            <xmlfileset dir="${config.dir}" includes="debug.xml"/>

            <sysproperty key="org.uncommons.reportng.title" value="Automated Test Report"/>
            <sysproperty key="org.uncommons.reportng.frames" value="false"/>
            <sysproperty key="org.uncommons.reportng.stylesheet" value="${reportNGcss}"/>
            <sysproperty key="org.uncommons.reportng.escape-output" value="false"/>

            <sysproperty key="drivers.dir" value="${drivers.dir}"/>
            <sysproperty key="config.dir" value="${config.dir}"/>
            <sysproperty key="image.dir" value="${image.dir}"/>
            <sysproperty key="basedir" value="${basedir}"/>
            <sysproperty key="browser" value="${browser}"/>
            <sysproperty key="upload.dir" value="${upload.dir}"/>
            <sysproperty key="build.version" value="${build.version}"/>

            <jvmarg value="-Dfile.encoding=UTF-8"/>

        </testng>
    </target>

    <target name="openReport" >
        <property name="reportDir" location="build/report/html"/>

        <script language="javascript">
            <![CDATA[
            var location = "file:///"+project.getProperty("reportDir").toString().replaceAll("\\\\","/")+"/index.html";
            location = location.toString().replace(/ /g, "%20");
             // show URL - copy and paste into browser address bar to test location

            var uriLocation = java.net.URI.create(location);
            var desktop = java.awt.Desktop.getDesktop();
            desktop.browse(uriLocation);
        ]]>
        </script>
    </target>

    <target name="generateXSLTReport" depends="setVariables">
        <path id="test.classpath">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </path>

        <xslt in="${report.dir}${file.separator}testng-results.xml"
              style="${config.dir}${file.separator}testng-results.xsl"
              out="${report.dir}${file.separator}output-xslt${file.separator}index.html" classpathref="test.classpath"
              processor="SaxonLiaison">
            <param name="testNgXslt.outputDir" expression="${report.dir}${file.separator}output-xslt"/>
            <param name="testNgXslt.sortTestCaseLinks" expression="true"/>
            <param name="testNgXslt.testDetailsFilter" expression="FAIL,SKIP,PASS"/>
        </xslt>
        <java jar="${lib.dir}${file.separator}batik${file.separator}batik-rasterizer.jar" fork="true">
            <arg line="-m image/jpeg"/>
            <arg line="${report.dir}${file.separator}output-xslt${file.separator}overview-chart.svg"/>
            <jvmarg value="-Djava.awt.headless=true"/>
        </java>
    </target>

</project>


